{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to deidcm","text":""},{"location":"#what-is-deidcm","title":"What is deidcm?","text":"<p>deidcm is a reusable toolset for deidentifiying images and metadata contained inside DICOM files. deidcm stands on the shoulders of giants (PyTorch, easyOCR)</p> <p>This package was initially built for processing medical data from the Deep.Piste study. It was primarly made for mammograms.</p>"},{"location":"#image-deidentification","title":"Image Deidentification","text":"<p>Image deidentification is the process of removing text information that can be used to identify an individual from an image. Our method uses Optical Text Recognition (OCR) for retrieving all text boxes present on an image. Then, we extract image coordinates from these text boxes and use them to hide information.</p> <p> </p> <p>deidcm image deidentifier can also work with a list of authorized words. This list can be used to keep useful information on your image. For instance, let's say we'd like to keep information related to image laterality if present on our images (circled in green in the following image). All other text information will be considered as sensible (circled in red in the following image).</p> <p></p> <p>Info</p> <p>The previous image has been obtained from the public dataset The Chinese Mammography Database (CMMD): An online mammography database with biopsy confirmed types for machine diagnosis of breast. This dataset is accessible through the The Cancer Imaging Archive (TCIA) Retriever tool.</p>"},{"location":"#attributes-deidentification","title":"Attributes Deidentification","text":"<p>Attributes or Metadata Deidentification is the process of removing sensible text information that can be used to identify an individual from a DICOM file attributes dataset. Expand the following section to see an example of DICOM attributes dataset.</p> Example <p>What does a DICOM attributes dataset look like?</p> <p>Let's visualize it. In order to do so, you'll need a DICOM file. visualize_dicom_dataset.py<pre><code>import pydicom\n\nds = pydicom.read_file(\"my_mammogram.dcm\")\nprint(ds)\n</code></pre></p> <p>Now, you should obtain an output like the following one: <pre><code>Dataset.file_meta -------------------------------\n(0002, 0000) File Meta Information Group Length  UL: 208\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: Digital Mammography X-Ray Image Storage - For Presentation\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.58672524\n(0002, 0010) Transfer Syntax UID                 UI: Explicit VR Little Endian\n(0002, 0012) Implementation Class UID            UI: 1.3.6.1.4.1.22213.1.143\n(0002, 0013) Implementation Version Name         SH: '0.5'\n(0002, 0016) Source Application Entity Title     AE: 'POSDA'\n-------------------------------------------------\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'\n(0008, 0008) Image Type                          CS: ['DERIVED', 'PRIMARY']\n(0008, 0012) Instance Creation Date              DA: '20170818'\n(0008, 0013) Instance Creation Time              TM: '114640'\n(0008, 0014) Instance Creator UID                UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.25669314\n(0008, 0016) SOP Class UID                       UI: Digital Mammography X-Ray Image Storage - For Presentation\n(0008, 0018) SOP Instance UID                    UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.58672524\n(0008, 0020) Study Date                          DA: '20100718'\n(0008, 0021) Series Date                         DA: '20100718'\n(0008, 0022) Acquisition Date                    DA: '20100718'\n(0008, 0023) Content Date                        DA: '20100718'\n(0008, 0030) Study Time                          TM: '000000'\n(0008, 0031) Series Time                         TM: '000000'\n(0008, 0032) Acquisition Time                    TM: '000000'\n(0008, 0033) Content Time                        TM: '000000'\n(0008, 0050) Accession Number                    SH: ''\n(0008, 0060) Modality                            CS: 'MG'\n(0008, 0068) Presentation Intent Type            CS: 'FOR PRESENTATION'\n(0008, 0070) Manufacturer                        LO: ''\n(0008, 0090) Referring Physician's Name          PN: ''\n(0008, 2218)  Anatomic Region Sequence  1 item(s) ---- \n    (0008, 0100) Code Value                          SH: '76752008'\n    (0008, 0102) Coding Scheme Designator            SH: 'SCT'\n    (0008, 0104) Code Meaning                        LO: 'Breast'\n---------\n(0010, 0010) Patient's Name                      PN: 'D1-0002'\n(0010, 0020) Patient ID                          LO: 'D1-0002'\n(0010, 0030) Patient's Birth Date                DA: ''\n(0010, 0040) Patient's Sex                       CS: 'F'\n(0010, 1010) Patient's Age                       AS: '040Y'\n(0012, 0062) Patient Identity Removed            CS: 'YES'\n(0012, 0063) De-identification Method            LO: 'Per DICOM PS 3.15 AnnexE. Details in 0012,0064'\n(0012, 0064)  De-identification Method Code Sequence  8 item(s) ---- \n    (0008, 0100) Code Value                          SH: '113100'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Basic Application Confidentiality Profile'\n    ---------\n    (0008, 0100) Code Value                          SH: '113101'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Clean Pixel Data Option'\n    ---------\n    (0008, 0100) Code Value                          SH: '113104'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Clean Structured Content Option'\n    ---------\n    (0008, 0100) Code Value                          SH: '113105'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Clean Descriptors Option'\n    ---------\n    (0008, 0100) Code Value                          SH: '113107'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Retain Longitudinal Temporal Information Modified Dates Option'\n    ---------\n    (0008, 0100) Code Value                          SH: '113108'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Retain Patient Characteristics Option'\n    ---------\n    (0008, 0100) Code Value                          SH: '113109'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Retain Device Identity Option'\n    ---------\n    (0008, 0100) Code Value                          SH: '113111'\n    (0008, 0102) Coding Scheme Designator            SH: 'DCM'\n    (0008, 0104) Code Meaning                        LO: 'Retain Safe Private Option'\n---------\n(0013, 0010) Private Creator                     LO: 'CTP'\n(0013, 1010) Private tag data                    LO: 'CMMD'\n(0013, 1013) Private tag data                    LO: '12391759'\n(0018, 0015) Body Part Examined                  CS: 'BREAST'\n(0018, 1164) Imager Pixel Spacing                DS: [0.094090909, 0.094090909]\n(0018, 1508) Positioner Type                     CS: 'MAMMOGRAPHIC'\n(0018, 7004) Detector Type                       CS: 'SCINTILLATOR'\n(0020, 000d) Study Instance UID                  UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.24151979\n(0020, 000e) Series Instance UID                 UI: 1.3.6.1.4.1.14519.5.2.1.1239.1759.61082364\n(0020, 0010) Study ID                            SH: ''\n(0020, 0011) Series Number                       IS: '1'\n(0020, 0013) Instance Number                     IS: '2'\n(0020, 0020) Patient Orientation                 CS: ['A', 'FR']\n(0020, 0062) Image Laterality                    CS: 'L'\n(0028, 0002) Samples per Pixel                   US: 1\n(0028, 0004) Photometric Interpretation          CS: 'MONOCHROME2'\n(0028, 0010) Rows                                US: 2294\n(0028, 0011) Columns                             US: 1914\n(0028, 0100) Bits Allocated                      US: 8\n(0028, 0101) Bits Stored                         US: 8\n(0028, 0102) High Bit                            US: 7\n(0028, 0103) Pixel Representation                US: 0\n(0028, 0301) Burned In Annotation                CS: 'NO'\n(0028, 0303) Longitudinal Temporal Information M CS: 'MODIFIED'\n(0028, 1040) Pixel Intensity Relationship        CS: 'LOG'\n(0028, 1041) Pixel Intensity Relationship Sign   SS: -1\n(0028, 1050) Window Center                       DS: '128.0'\n(0028, 1051) Window Width                        DS: '256.0'\n(0028, 1052) Rescale Intercept                   DS: '0.0'\n(0028, 1053) Rescale Slope                       DS: '1.0'\n(0028, 1054) Rescale Type                        LO: 'US'\n(0028, 1055) Window Center &amp; Width Explanation   LO: 'Full width of 8 bit data'\n(0028, 1056) VOI LUT Function                    CS: 'SIGMOID'\n(0028, 2110) Lossy Image Compression             CS: '00'\n(0040, 0318) Organ Exposed                       CS: 'BREAST'\n(0040, 0555)  Acquisition Context Sequence  0 item(s) ---- \n(0054, 0220)  View Code Sequence  1 item(s) ---- \n(0008, 0100) Code Value                          SH: '399368009'\n(0008, 0102) Coding Scheme Designator            SH: 'SCT'\n(0008, 0104) Code Meaning                        LO: 'medio-lateral oblique'\n(0054, 0222)  View Modifier Code Sequence  0 item(s) ---- \n---------\n(2050, 0020) Presentation LUT Shape              CS: 'IDENTITY'\n(7fe0, 0010) Pixel Data                          OB: Array of 4390716 elements\n</code></pre></p> <p>Info</p> <p>The previous dataset has been obtained from the public dataset The Chinese Mammography Database (CMMD): An online mammography database with biopsy confirmed types for machine diagnosis of breast. This dataset is accessible through the The Cancer Imaging Archive (TCIA) Retriever tool.</p>"},{"location":"#the-customizable-recipe","title":"The customizable recipe","text":"<p>The attributes deidentifier is based on a customizable recipe which is a file describing deidentification actions for each DICOM attribute. The recipe file is written in JSON:</p> <pre><code>{\n    \"general_rules\": {\n        \"0x00020000\": [\n            \"FileMetaInformationGroupLength\",\n            \"UL\",\n            \"CONSERVER\"\n        ],\n        \"0x001811BB\": [\n            \"AcquisitionFieldOfViewLabel\",\n            \"LO\",\n            \"PSEUDONYMISER\"\n        ],\n        \"0x001021B0\": [\n            \"AdditionalPatientHistory\",\n            \"LT\",\n            \"RETIRER\"\n        ]\n        \"0x00080032\": [\n            \"AcquisitionTime\",\n            \"TM\",\n            \"EFFACER\"\n        ]\n    },\n    \"specific_rules\": {\n        \"0x00080100\": {\n            \"sequence\": \"0x00540220\",\n            \"rule\": \"CONSERVER\"\n        },\n        \"0x00080104\": {\n            \"sequence\": \"0x00540220\",\n            \"rule\": \"CONSERVER\"\n        },\n        \"0x00080102\": {\n            \"sequence\": \"0x00540220\",\n            \"rule\": \"CONSERVER\"\n        }\n    }\n}\n</code></pre>"},{"location":"#general-and-specific-rules","title":"General and Specific Rules","text":"<p>The recipe file contains 2 types of rules:</p> Type of Rules Description General Rules A basic rule. It can be defined for any attribute. Specific Rules A rule used to target a child attribute of a sequence. <p>How do we use these rules?</p> <ul> <li>In practice, we'll mostly use general rules. They allow us to apply a given deidentification action on a targeted attribute.</li> <li>Specific rules find their use when we want to target a generic attribute inside a sequence. By generic, we refer to an attribute that is used several     times in the dataset but inside different sequences. Let's see an example:</li> </ul> <p>Example</p> <p>In the following dataset, we have 2 sequences that hold very different types of information. However, these sequences use the same children attributes. <pre><code>(0012, 0064)  My First Sequence  3 item(s) ---- \n    (0008, 0100) Code Value                          SH: 'A1'\n    (0008, 0102) Coding Scheme Designator            SH: 'Mam'\n    (0008, 0104) Code Meaning                        LO: 'Mammogram'\n    ---------\n    (0008, 0100) Code Value                          SH: 'A2'\n    (0008, 0102) Coding Scheme Designator            SH: 'MamR'\n    (0008, 0104) Code Meaning                        LO: 'Mammogram Reader'\n    ---------\n    (0008, 0100) Code Value                          SH: 'A3'\n    (0008, 0102) Coding Scheme Designator            SH: 'SE'\n    (0008, 0104) Code Meaning                        LO: 'Study Exam'\n---------\n(0013, 0242)  My Second Sequence  1 item(s) ---- \n    (0008, 0100) Code Value                          SH: 'BT-67'\n    (0008, 0102) Coding Scheme Designator            SH: 'XRC'\n    (0008, 0104) Code Meaning                        LO: 'ACQUISITION: X-RAY CHEST'\n---------\n</code></pre></p> <p>Case n\u00b01: Delete all <code>Code Meaning</code> attributes</p> <p>We set a general rule for the attribute <code>Code Meaning</code> with the action <code>RETIRER</code>.</p> <p>Case n\u00b02: Delete all <code>Code Meaning</code> attributes except those inside <code>My Second Sequence</code> </p> <ul> <li>We set a general rule for the attribute <code>Code Meaning</code> with the action <code>RETIRER</code>.</li> <li>We set a specific rule for the attribute <code>Code Meaning</code> inside <code>My Second Sequence</code>.</li> </ul> <p>Warning</p> <p>If a general rule is defined for a given sequence. The rule applied to the children will be the strictest between the sequence rule and the sequence child rule.</p> <p>Warning</p> <p>If a general rule is defined for a given sequence and children have specific rules, the specific rules will override the general rule.</p> <pre><code>graph TD\nA[Tag 0x00540220 in 0x00080100 SQ] --&gt; B{General Rule?};\nB --&gt;|Yes| C{Specific Rule?};\nC --&gt;|Yes| D[Apply specific rule];\nC --&gt;|No| E[Apply the strictest rule between general rules];\nB --&gt;|No| Z[Apply the strictest rule: REMOVE];</code></pre>"},{"location":"#define-your-own-recipe","title":"Define your own recipe","text":"<p>A <code>recipe.json</code> file is already available inside deidcm package. However, it is possible to define your own <code>recipe.json</code>. In order to specify a custom recipe, use the the Config object. </p> <p>Warning</p> <p>The inbuilt <code>recipe.json</code> file was created for the Deep.Piste study. It was made for mammograms only and you should probably define your own file meeting your own needs.</p> <p>If you don't define a new <code>recipe.json</code> folder, deidcm will show a warning and automatically use its inbuilt referential.</p> <p>In order to define your own <code>recipe.json</code>, you'll have to create the file <code>recipe.json</code> and respect this structure :</p> <pre><code>{\n    \"general_rules\": {\n        \"HEXADECIMAL_DICOM_TAG_ATTRIBUTE\": [\n            \"AttributeName\",\n            \"AttributeType\",\n            \"DeidentificationAction\"\n        ],\n        ...\n    },\n    \"specific_rules\": {\n        \"HEXADECIMAL_DICOM_TAG_OF_CHILD_ATTRIBUTE\": {\n            \"sequence\": \"HEXADECIMAL_DICOM_TAG_OF_SEQUENCE_ATTRIBUTE\",\n            \"rule\": \"DeidentificationAction\"\n        },\n        ...\n    }\n}\n</code></pre> <p>Note</p> <ul> <li><code>AttributeName</code> is only used for making the file readable for humans</li> <li><code>AttributeType</code> is the attribute's DICOM Value Representation (VR). It is represented by two letters.</li> <li><code>DeidentificationAction</code> is a string that defines which action deidcm deidentifier will take for a specific attribute. This value should be among the possible actions in the below table.</li> </ul> Action (French Name) Equivalent in English Description CONSERVER KEEP The attribute will be kept. EFFACER ERASE The attribute will still be in the dataset but its value will be blanked. RETIRER REMOVE The attribute will be removed from the dataset. PSEUDONYMISER DEIDENTIFY The attribute will be deidentified. <p>Warning</p> <p>English names are not supported inside the <code>recipe.json</code>. The equivalent column above is just for information purposes.</p>"},{"location":"pages/about_epiconcept/","title":"About Epiconcept","text":"<p>Epiconcept is a French company that has been providing software solutions, domain expertise, and services in the field of public health for over 25 years. The company's core activities are focused on several key areas:</p> <ol> <li> <p>Logiciels SaaS (Software as a Service): Epiconcept is an established SaaS software developer, specializing in health prevention and screening solutions. Their software is widely recognized and used by thousands of healthcare professionals and end-users. They prioritize a \"customer-centric\" approach to enhance user experience and adapt to the ever-evolving landscape of public health programs.</p> </li> <li> <p>Custom E-Health and Data Science Solutions: Epiconcept offers tailor-made information technology solutions based on four key pillars, including collaborative project development, a specialized technical foundation for health program management, agile project management methodologies, and domain expertise. These elements ensure the simplification of processes and the scalability of projects to meet the unique needs of clients.</p> </li> <li> <p>Epidemiology Services: The company's Epidemiology team coordinates applied research programs and international studies, primarily in the field of infectious diseases. They provide high-value services related to program evaluation, biostatistics, and training, making them a trusted partner in the global healthcare sector.</p> </li> </ol> <p>Epiconcept's track record includes involvement in over 250 health-related projects, a team of more than 100 experienced professionals, and operations in over 50 countries. They provide solutions used by more than 50,000 healthcare professionals and benefit over 12 million users. The company is renowned for its expertise in key areas such as SARS-CoV-2, prevention and screening programs, and information systems for population-based cohort management. They have been instrumental in epidemiological research, notably with the World Health Organization (WHO) and the European Centre for Disease Prevention and Control (ECDC).</p> <p>Epiconcept is also known for its extensive work in managing health cohort data and offers services related to central procurement. They host healthcare data and have been a certified Personal Health Data Host (H\u00e9bergeur de Donn\u00e9es de Sant\u00e9 - HDS) since 2012, with ISO 27001/HDS certification since 2019, ensuring data security and privacy.</p> <p>For more information, please visit Epiconcept's website.</p>"},{"location":"pages/deid_mammogram/","title":"Mammogram Deidentification","text":"Deidentification Functionalities Image Deidentification based on OCR Attributes/Metadata Deidentification based on a Recipe"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram","title":"<code>deidcm.dicom.deid_mammogram</code>","text":"<p>This module is a mammograms deidentification toolbox.</p> <p>This module contains functions related to deidentification of mammograms. It fulfills the following purposes:</p> <ul> <li>deidentifying mammogram's images</li> <li>deidentifying mammogram's metadata</li> </ul>"},{"location":"pages/deid_mammogram/#image-deidentification","title":"Image Deidentification","text":"Example get_PIL_image.py<pre><code>from deidcm_deid.dicom.deid_mammogram import get_PIL_image\nimport pydicom\n\nds = pydicom.read_file(\"my-mammogram.dcm\")\nimg = get_PIL_image(ds)\nimg.show()\n</code></pre> <p>Info</p> <p>The list of available languages can be found here.</p> <p>Info</p> <p>For more information on how to define your own list of authorized words, go to Customize Deidentification Tasks</p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.deidentify_image_png","title":"<code>deidentify_image_png(infile, outdir, filename)</code>","text":"<p>Deidentify and write a given mammogram's image in outdir as filename.png</p> <p>This function invokes the OCR reader for getting all potential words on a  mammogram's image. Then, it hides all found words by higlighting them in black. </p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The path of the DICOM file to deidentify.</p> required <code>outdir</code> <code>str</code> <p>The path of the directory that will store the output.</p> required <code>filename</code> <code>str</code> <p>The name of the resulting PNG file. (don't add the file extension).</p> required"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.get_PIL_image","title":"<code>get_PIL_image(dataset)</code>","text":"<p>Get Image object from Python Imaging Library(PIL)</p> <p>Get the image from the pydicom dataset and convert it from a numpy.ndarray to a PIL image object. If available, the function will use metadata information  contained inside the pydicom dataset for the conversion.  </p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>Dataset</code> <p>A pydicom dataset which can be obtained from a DICOM file.</p> required <p>Returns:</p> Name Type Description <code>Image</code> <code>Image</code> <p>A PIL image object.</p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.get_text_areas","title":"<code>get_text_areas(pixels, languages=['fr'])</code>","text":"<p>Read and return words of an image.</p> <p>This function takes a pixel array in input and submits it to the easyOCR Reader. This Reader will then return a list of found words. This function implicitly  remove authorized words from the computed list.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>ndarray</code> <p>An array representing an image.</p> required <code>languages</code> <code>list</code> <p>A list of supported languages for the OCR Reader. This allows to submit images with text written in different languages.</p> <code>['fr']</code> <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of words detected on the submitted image.</p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.remove_authorized_words_from","title":"<code>remove_authorized_words_from(ocr_data)</code>","text":"<p>Remove authorized words from ocr_data list</p> <p>This function allows to remove authorized words from easyOCR output. It is useful if you want to keep some text information on your image such as image laterality information (RMLO, LCC, OBLIQUE G...).</p> <p>Parameters:</p> Name Type Description Default <code>ocr_data</code> <code>list</code> <p>A list of words and coordinates obtained after submitting an image to easyOCR Reader.</p> required <p>Returns:</p> Type Description <code>list</code> <p>The same list of words and coordinates minus the authorized words elements.</p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.hide_text","title":"<code>hide_text(pixels, ocr_data, color_value='black', mode='rectangle', margin=300)</code>","text":"<p>Censor text present on the pixels array representing an image.</p> <p>Take the input image and draw new shapes with PIL package in order to censor OCR-detected words.</p> <p>Parameters:</p> Name Type Description Default <code>pixels</code> <code>ndarray</code> <p>A pixels array representing an image</p> required <code>ocr_data</code> <code>list</code> <p>A list of words and coordinates obtained by easyOCR Reader after submitting an image.</p> required <code>color_value</code> <code>str</code> <p>A string indicating the color of the rectangle used for censoring information (<code>white</code> or <code>black</code>)</p> <code>'black'</code> <code>mode</code> <code>str</code> <p>A string indicating the method for censoring information. (<code>blur</code> or <code>rectangle</code>)</p> <code>'rectangle'</code> <p>Returns:</p> Type Description <code>ndarray</code> <p>The deidentified pixels array.</p>"},{"location":"pages/deid_mammogram/#attributes-deidentification","title":"Attributes Deidentification","text":"<p>Info</p> <p><code>org_root</code> refers to a prefix used for deidentifying DICOM UIDs.  This prefix has to be unique for your organization.</p> <p>For more information, see NEMA DICOM Standards Documentation.</p> Example <p>Let's test our recipe by adding one of its attribute into a pydicom dataset. The attribute in our recipe looks like this: <pre><code>\"0x00209161\": [\n    \"ConcatenationUID\",\n    \"UI\",\n    \"PSEUDONYMISER\"\n],\n</code></pre></p> <p>Step n\u00b01: We add the new DICOM UID to our pydicom dataset <pre><code>import pydicom\n\nds = pydicom.read_file(\"my-mammogram.dcm\")\nds.add_new(\"0x00209161\", \"UI\", \"1.123.123.1234.123456.12345678\")\nds.save_as(\"my-modified-mammogram.dcm\")\n</code></pre></p> <p>It will then appear inside your pydicom dataset: <pre><code>(0020, 9161) Concatenation UID                   UI: 1.123.123.1234.123456.12345678\n</code></pre></p> <p>Step n\u00b02: We deidentify the folder containing our test mammogram <pre><code>from deidcm_deid.dicom.deid_mammogram import deidentify_attributes\n\ndf = deidentify_attributes(\"/path/to/mammogram/folder\", \"/path/to/outdir\", org_root=\"9.9.9.9.9\", erase_outdir=False)\nprint(df.ConcatenationUID_0x00209161_UI_1____)\n</code></pre> <pre><code>9.9.9.9.9.474079559915109435636573090782\n</code></pre></p> <p>Note</p> <p>This function is implicitly called by deidentify_attributes each time it needs to take a deidentification action.</p> <p>Warning</p> <p>This function takes a zero trust approach when encountering unknown tags and will always return RETIRER (= REMOVE) for all tags not found inside the recipe.</p> Example <p>Example n\u00b01: Retrieve a rule for a tag inside the recipe</p> <p>get_general_rule_for_known_tag.py<pre><code>from deidcm_deid.dicom.deid_mammogram import load_recipe, get_general_rule\n\nrecipe = load_recipe()\nrule = get_general_rule(\"0x00020000\", recipe)\n</code></pre> <pre><code>CONSERVER\n</code></pre></p> <p>Example n\u00b02: Retrieve a rule for a tag that is not declared inside the recipe</p> <p>get_general_rule_for_unknown_tag.py<pre><code>from deidcm_deid.dicom.deid_mammogram import load_recipe, get_general_rule\n\nrecipe = load_recipe()\nrule = get_general_rule(\"0x00026666\", recipe)\n</code></pre> <pre><code>RETIRER\n</code></pre></p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.deidentify_attributes","title":"<code>deidentify_attributes(indir, outdir, org_root, erase_outdir=True)</code>","text":"<p>Produce a Pandas dataframe with deidentified information from a folder of DICOM files.</p> <p>This function creates a Pandas dataframe from all files present in the <code>indir</code> folder. Then, it loads the deidentification recipe and iterates through the dataframe to deidentify its content. Finally, it returns the deidentified dataframe object. </p> <p>It also takes <code>outdir</code> and <code>erase_outdir</code> arguments for handling output directory auto-cleaning in the context of a data pipeline. If you're not interested in auto-cleaning your output repository, simply specify <code>outdir</code> and set <code>erase_outdir</code> to <code>False</code>.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>The input directory (DICOM files to deidentify)</p> required <code>outdir</code> <code>str</code> <p>The output directory (deidentified/resulting files)</p> required <code>org_root</code> <code>str</code> <p>An organization root identifier for deidentifying DICOM UIDs.</p> required <code>erase_outdir</code> <code>bool</code> <p>Empty the output directory if True</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A Pandas dataframe containing all metadata/attributes information.</p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.get_general_rule","title":"<code>get_general_rule(tag, recipe)</code>","text":"<p>Get the rule associated with the given tag in <code>recipe.json</code></p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>A DICOM tag</p> required <code>recipe</code> <code>dict</code> <p>A Python dictionary containing recipe elements. See <code>load_recipe()</code></p> required <p>Returns:</p> Type Description <code>str</code> <p>The action associated to this DICOM tag in the provided recipe. It can be anything among deidentification actions (CONSERVER, RETIRER EFFACER, PSEUDONYMISER)</p>"},{"location":"pages/deid_mammogram/#deidcm.dicom.deid_mammogram.get_specific_rule","title":"<code>get_specific_rule(tags, recipe)</code>","text":"<p>Extract the specific rule from a list of tags in <code>recipe.json</code> if there is one.</p> <p>Parameters:</p> Name Type Description Default <code>tags</code> <code>List[str]</code> <p>A list of DICOM tags. The parent attribute is always before the child attribute.  For instance, if we take ['AAA', 'BBB', 'CCC'], 'AAA' is a sequence containing 'BBB' and 'BBB' is a sequence containing the attribute 'CCC'.  </p> required <code>recipe</code> <code>dict</code> <p>A Python dictionary containing recipe elements. See <code>load_recipe()</code></p> required <p>Returns:</p> Type Description <code>str</code> <p>The action associated to this DICOM tag in the provided recipe. Same values as <code>get_general_rules</code>.  It can also return <code>None</code> if no specific rules are defined for tags inside the list.</p>"},{"location":"pages/deid_mammogram/#customize-deidentification-tasks","title":"Customize Deidentification Tasks","text":"Example <p>Default Configuration (inbuilt recipe, no authorized words) default_config.py<pre><code>from deidcm.config import Config\n\nconfig = Config()\nprint(config.recipe)\n</code></pre></p> <p>Custom Configuration custom_config.py<pre><code>from deidcm.config import Config\n\nconfig = Config(recipe_path=\"/path/to/custom-recipe.json\", authorized_words_path=\"/path/to/authorized_words.txt\")\nprint(config.recipe)\n</code></pre></p> <p>Note</p> <p>You don't have to call this function as it already implicitly when you instanciate the Config object.</p> <p>Tip</p> <p>This function can be called to check if your customized recipe is correctly detected by deidcm.</p> Example example_load_recipe.py<pre><code>from deidcm.config import Config\n\nconfig = Config(recipe_path=\"/path/to/custom-recipe.json\", authorized_words_path=\"/path/to/authorized_words.txt\")\nprint(config.recipe)\n</code></pre> <pre><code>{'0x00020000': ['FileMetaInformationGroupLength', 'UL', 'CONSERVER'], '0x00020001': ['FileMetaInformationVersion', 'OB', 'CONSERVER']}\n</code></pre> <p>Note</p> <p>You don't have to call this function as it already implicitly when you instanciate the Config object.</p> <p>Tip</p> <p>This function can be called to check if your customized list of authorized words is correctly detected by deidcm.</p> Example example_load_recipe.py<pre><code>from deidcm.config import Config\n\nconfig = Config(recipe_path=\"/path/to/custom-recipe.json\", authorized_words_path=\"/path/to/authorized_words.txt\")\nprint(config.authorized_words)\n</code></pre> <pre><code>['HELLO', 'ALTER', 'DSQLD', 'SHOCR']\n</code></pre>"},{"location":"pages/deid_mammogram/#deidcm.config.Config","title":"<code>deidcm.config.Config</code>","text":"<p>This class is used to change the configuration of your environment.</p> <p>This singleton object has to be instanciated for deidentification tasks. It allows you to define the path to a custom recipe and the path to  a authorized_words.txt file.</p> <ul> <li><code>recipe.json</code>: a JSON file that contains the recipe orchestrating the attribute deidentification process.</li> <li><code>authorized_words.txt</code>: a TXT file that contains one word per line. Each word will be kept on the image even if it is detected by the OCR reader.</li> </ul>"},{"location":"pages/deid_mammogram/#deidcm.config.Config.__new__","title":"<code>__new__(recipe_path=None, authorized_words_path=None)</code>","text":"<p>Create a new instance of Config if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>recipe_path</code> <code>str</code> <p>the path of your custom <code>recipe.json</code> file.</p> <code>None</code> <code>authorized_words_path</code> <code>str</code> <p>the path of your custom <code>authorized_words.txt</code> file</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Config</code> <code>Self</code> <p>The single instance of the Config class.</p>"},{"location":"pages/deid_mammogram/#deidcm.config.Config.load_recipe","title":"<code>deidcm.config.Config.load_recipe(recipe_filepath)</code>  <code>classmethod</code>","text":"<p>Get the recipe from recipe.json and load it into a python dict.</p> <p>This function reads <code>recipe.json</code>. If a user-defined version of the file is detected, it will be used. Otherwise, the inbuilt version of the file will be used.</p> <p>Be aware that the inbuilt version of the file does not suit a generic usage. It was created for the Deep.piste study. It is highly recommended to create your own version of <code>recipe.json</code>.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A Python dictionary with recipe elements.</p>"},{"location":"pages/deid_mammogram/#deidcm.config.Config.load_authorized_words","title":"<code>deidcm.config.Config.load_authorized_words(authorized_words_filepath)</code>  <code>classmethod</code>","text":"<p>Get and load the list of authorized words from authorized_words.json</p> <p>This function reads <code>authorized_words.txt</code> and load it into a python list. If the file is not defined, the deidentification process will erase all detected words.</p> <p>Returns:</p> Type Description <code>list</code> <p>A Python list of authorized words</p>"},{"location":"pages/df2dicom/","title":"df2dicom Module","text":""},{"location":"pages/df2dicom/#df2dicom-module","title":"df2dicom Module","text":"<p>This module contains functions used to transform a pandas DataFrame into DICOM and PNG files. It can build a valid DICOM file by obtaining the pixels and DICOM attributes from the DataFrame.</p> Example <p>In the following example, we have a directory containing a single DICOM file.  deidentify_attributes_and_pixels.py<pre><code>from deidcm.dicom.df2dicom import df2dicom\nfrom deidcm.dicom.deid_mammogram import deidentify_attributes\n\n# First part of the deidentification process (Attribute deidentification)\ndf = deidentify_attributes(indir='/path/to/indir', outdir='/path/to/outdir', org_root='15681.1344456.1444', erase_outdir=False)\ndf.to_csv(os.path.join(outdir, 'meta.csv'))\n\n# Second part of the deidentification process (OCR deidentification)\ndf2dicom(df, outdir='/path/to/outdir_folder', do_image_deidentification=True)\n</code></pre></p> <p>Here is an overview of the resulting files in the output directory: <pre><code>outdir/\n\u251c\u2500\u2500 meta.csv\n\u2514\u2500\u2500 15681.1344456.1444.150859203650428010901213750509.png\n</code></pre></p> Example <p>It is also possible to obtain only DICOM files: only_dcm_files.py<pre><code>...\ndf = deidentify_attributes(indir='/path/to/indir', outdir='/path/to/outdir', org_root='15681.1344456.1444', erase_outdir=False, output_file_formats = [\"dcm\"])\n...\n</code></pre></p> <p>Output directory: <pre><code>outdir/\n\u2514\u2500\u2500 15681.1344456.1444.150859203650428010901213750509.dcm\n</code></pre></p> <p>it is also possible to obtain DICOM and PNG files: only_dcm_files.py<pre><code>...\ndf = deidentify_attributes(indir='/path/to/indir', outdir='/path/to/outdir', org_root='15681.1344456.1444', erase_outdir=False, output_file_formats = [\"dcm\", \"png\"])\ndf.to_csv(os.path.join(outdir, 'meta.csv'))\ndf2dicom(df, outdir='/path/to/outdir_folder', do_image_deidentification=True)\n</code></pre></p> <p>Output directory: <pre><code>outdir/\n\u251c\u2500\u2500 meta.csv\n\u251c\u2500\u2500 15681.1344456.1444.150859203650428010901213750509.png\n\u2514\u2500\u2500 15681.1344456.1444.150859203650428010901213750509.dcm\n</code></pre></p>"},{"location":"pages/df2dicom/#deidcm.dicom.df2dicom.df2dicom","title":"<code>df2dicom(df, outdir, do_image_deidentification=False, test=False, output_file_formats=None)</code>","text":"<p>Build DICOM and/or PNG files from a pandas DataFrame obtained with dicom2df.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The pandas DataFrame obtained with <code>dicom2df</code> that you want to convert back to DICOM/PNG files.</p> required <code>outdir</code> <code>str</code> <p>Path of the directory that will contain your files at the end of the process.</p> required <code>do_image_deidentification</code> <code>bool</code> <p>Whether or not this process will trigger the OCR deidentification for pixels.</p> <code>False</code> <code>test</code> <code>bool</code> <p>This option should not be left to False anytime.</p> <code>False</code> <code>output_file_formats</code> <code>list</code> <p>A list of formats. Currently supported formats are [\"dcm\", \"png\"]. Both can be used alone if you need a single output format. If you select \"png\", the process will produce a PNG for each line of <code>df</code></p> <code>None</code>"},{"location":"pages/dicom2df/","title":"dicom2df Module","text":""},{"location":"pages/dicom2df/#dicom2df-module","title":"dicom2df Module","text":"<p>This module contains functions used to transform DICOM files into  a single pandas DataFrame. It opens each file with pydicom, and flats the DICOM nested structure before saving it to the dataFrame.</p> Example <p>In the following example, we have a directory containing a single DICOM file.  dicom2df_single_file.py<pre><code>from deidcm.dicom.dicom2df import dicom2df\n\ndicom2df(search_dir='/path/to/dcm-dir')\n</code></pre></p> <p>In the output of the command, we can see the number of files that have been read correctly and then the dataframe containing all DICOM files information. <pre><code>06-26-2024 15:10:18 Successfully retrieved file(s): 1\n06-26-2024 15:10:18 Unreadable file(s): 0\nFileMetaInformationGroupLength_0x00020000_UL_1____  ...      FilePath\n0                                                208  ...  ./cmmd-1.dcm\n\n[1 rows x 101 columns]\n</code></pre></p>"},{"location":"pages/dicom2df/#deidcm.dicom.dicom2df.dicom2df","title":"<code>dicom2df(search_dir, with_private=False, with_pixels=False, with_seqs=True)</code>","text":"<p>Create a pandas DataFrame based on a directory of DICOM files</p> <p>This function creates </p> <p>Parameters:</p> Name Type Description Default <code>search_dir</code> <code>str</code> <p>Path to the directory containing the DICOM files.</p> required <code>with_private</code> <code>bool</code> <p>Whether to include Private DICOM tags in the dataframe or not.</p> <code>False</code> <code>with_pixels</code> <code>bool</code> <p>Whether to include pixel bytes (PixelData attribute) in the produced the dataFrame or not. Default to false as it has an important impact on performance.</p> <code>False</code> <code>with_seqs</code> <code>bool</code> <p>Whether to include DICOM sequences of attributes in the produced dataFrame or not.</p> <code>True</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>A dataframe with information of all DICOM files present in <code>search_dir</code>.</p>"},{"location":"pages/license/","title":"License","text":""},{"location":"pages/license/#mit-license","title":"MIT License","text":"<p>Copyright 2020 Epiconcept</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"pages/quickstart/","title":"Quickstart","text":""},{"location":"pages/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Note</p> <p>Optical Character Recognition (OCR) is an intensive resource-consuming process and it is recommended to have at least 4 GB of free RAM for running deidcm functionalities related to image deidentification.</p> <p>Info</p> <p>deidcm relies on <code>easyOCR</code> which uses <code>PyTorch</code>. If your system does not have a GPU, consider installing <code>PyTorch</code> CPU-only version (more information here).</p>"},{"location":"pages/quickstart/#installation","title":"Installation","text":"<p>For installing <code>deidcm</code> tools, run the following command:</p> <pre><code>pip install deidcm\n</code></pre>"},{"location":"pages/quickstart/#start-working-with-deidcm","title":"Start working with deidcm","text":"<p>You can start using <code>deidcm</code> by importing functions.</p> <p>Here is an example with the <code>deidentify_image_png</code> function. This function takes 3 parameters: an input dicom file, the output directory and the name of the final png file. More details can be found here.</p> deidentify_image.py<pre><code>from deidcm.config import Config\nfrom deidcm.dicom.deid_mammogram import deidentify_image_png\n\n# Default Configuration (inbuilt-recipe, all words on pixels \n# have to be erased)\nConfig()\n\ndeidentify_image_png(\n    infile=\"/data/dicoms/1.3.6.1.4.1.9590.100.1.2.16146556.dcm\",\n    outdir=\"/data/processed\",\n    filename=\"1.3.6.1.4.1.9590.100.1.2.16146556\"\n)\n</code></pre> <p>Note</p> <p>If you want to use a custom recipe, use the the Config object.</p>"}]}